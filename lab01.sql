-- MySQL Script generated by MySQL Workbench
-- Tue Mar 30 14:37:07 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8mb4 ;
SHOW WARNINGS;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`airplane`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`airplane` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`airplane` (
    `id` VARCHAR(45) NOT NULL,
    `year_` INT NULL,
    `model` VARCHAR(45) NULL,
    `brand` VARCHAR(45) NULL,
    `type_` INT NOT NULL,
    `cant_max` INT NOT NULL,
    PRIMARY KEY (`id`)
)  ENGINE=INNODB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`flight`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`flight` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`flight` (
  `id` VARCHAR(45) NOT NULL,
  `rute_id` VARCHAR(45) NOT NULL,
  `airplane_id` VARCHAR(45) NOT NULL,
  `schedule_id` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_flight_rute1_idx` (`rute_id` ASC) VISIBLE,
  INDEX `fk_flight_airplane1_idx` (`airplane_id` ASC) VISIBLE,
  INDEX `fk_flight_schedule1_idx` (`schedule_id` ASC) VISIBLE,
  CONSTRAINT `fk_flight_rute1`
    FOREIGN KEY (`rute_id`)
    REFERENCES `mydb`.`rute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_flight_airplane1`
    FOREIGN KEY (`airplane_id`)
    REFERENCES `mydb`.`airplane` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_flight_schedule1`
    FOREIGN KEY (`schedule_id`)
    REFERENCES `mydb`.`schedule` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`passenger`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`passenger` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`passenger` (
  `user_username` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `lastname` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `dob` DATETIME NULL,
  `address` VARCHAR(45) NULL,
  `work_phone` INT NULL,
  `cell_phone` INT NULL,
  `ticket_id` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`user_username`),
  INDEX `fk_passenger_user_idx` (`user_username` ASC) VISIBLE,
  INDEX `fk_passenger_ticket1_idx` (`ticket_id` ASC) VISIBLE,
  CONSTRAINT `fk_passenger_user`
    FOREIGN KEY (`user_username`)
    REFERENCES `mydb`.`user` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_passenger_ticket1`
    FOREIGN KEY (`ticket_id`)
    REFERENCES `mydb`.`ticket` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`rute`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`rute` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`rute` (
    `id` VARCHAR(45) NOT NULL,
    `origin` VARCHAR(45) NOT NULL,
    `destination` VARCHAR(45) NOT NULL,
    `duration` VARCHAR(45) NOT NULL,
    PRIMARY KEY (`id`)
)  ENGINE=INNODB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`schedule`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`schedule` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`schedule` (
    `id` VARCHAR(45) NOT NULL,
    `day` INT NOT NULL,
    `hour` INT NOT NULL,
    `minute` INT NOT NULL,
    PRIMARY KEY (`id`)
)  ENGINE=INNODB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`ticket`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ticket` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`ticket` (
  `id` VARCHAR(45) NOT NULL,
  `flight_id` VARCHAR(45) NOT NULL,
  `price` INT NOT NULL,
  `seat` INT NOT NULL,
  INDEX `fk_ticket_flight1_idx` (`flight_id` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_ticket_flight1`
    FOREIGN KEY (`flight_id`)
    REFERENCES `mydb`.`flight` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`user` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`user` (
    `username` VARCHAR(45) NOT NULL,
    `password` VARCHAR(45) NOT NULL,
    `rol` INT NOT NULL,
    PRIMARY KEY (`username`)
)  ENGINE=INNODB;

-- -----------------------------------------------------
-- TODOS LOS PROCEDIMIENTOS DE INSERTAR
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Procedure PRC_INSERT_AIRPLANE (CORRECTO)
-- Se inserta el airplane
-- -----------------------------------------------------
USE `mydb`;
DROP procedure IF EXISTS `mydb`.`PRC_INSERT_AIRPLANE`;
DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_INSERT_AIRPLANE`(id VARCHAR(45),year_ INT,
model varchar(45), brand varchar(45),type_ INT, cant_max INT)
BEGIN

insert into airplane values(id,year_,model,brand,type_,cant_max);
END$$
DELIMITER ;
SHOW WARNINGS;


-- -----------------------------------------------------
-- Procedure PRC_LIST_AIRPLANES
-- En este caso, lista de todos los airplanes
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`PRC_LIST_AIRPLANES`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_LIST_AIRPLANES`()
BEGIN
SELECT * FROM mydb.airplane;
END$$
DELIMITER ;

-- -----------------------------------------------------
-- TODOS LOS PROCEDIMIENTOS DE BUSCAR
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Procedure PRC_SEARCH_AIRPLANE
-- Busca el airplane por medio del ID
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`PRC_SEARCH_AIRPLANE`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_SEARCH_AIRPLANE`(P_AIRPLANE_ID VARCHAR(45))
BEGIN
select * from mydb.airplane where id = P_AIRPLANE_ID;
END$$
DELIMITER ;
-- -----------------------------------------------------
-- TODOS LOS PROCEDIMIENTOS DE BORRAR
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Procedure PRC_DELETE_AIRPLANE
-- En este caso, elimina el airplane
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`PRC_DELETE_AIRPLANE`;
DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_DELETE_AIRPLANE`(in P_AIRPLANE_ID VARCHAR(45))
BEGIN
DELETE FROM airplane
WHERE id =P_AIRPLANE_ID;
END$$
DELIMITER ;

-- -----------------------------------------------------
-- TODOS LOS PROCEDIMIENTOS DE ACTUALIZAR
-- -----------------------------------------------------

-- -----------------------------------------------------
-- procedure PRC_UPDATE_USER
-- Actualiza el airplane, excepto el id
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`PRC_UPDATE_AIRPLANE`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_UPDATE_AIRPLANE`( 
IN P_AIRPLANE_ID VARCHAR(45),
IN P_AIRPLANE_YEAR INT,
IN P_AIRPLANE_MODEL varchar(100),
IN P_AIRPLANE_BRAND varchar(100),
IN P_AIRPLANE_TYPE INT,
IN P_AIRPLANE_CANT_MAX INT
)

BEGIN
UPDATE airplane
SET
year_ = P_AIRPLANE_YEAR,
model = P_AIRPLANE_MODEL,
brand = P_AIRPLANE_BRAND,
type_ = P_AIRPLANE_TYPE,
cant_max = P_AIRPLANE_CANT_MAX
WHERE id = P_AIRPLANE_ID;
END$$
DELIMITER ;
-- -----------------------------------------------------
-- PRUEBAS DE LOS PROCEDIMIENTOS
-- TODOS FUNCIONAN CORRECTAMENTE
-- -----------------------------------------------------
call PRC_INSERT_AIRPLANE('5094A',2020,'Iberia','Airbus A330',01,150);
call PRC_INSERT_AIRPLANE('6589B',2019,'Iberia','Airbus B440',02,140);
call PRC_LIST_AIRPLANES();
call PRC_SEARCH_AIRPLANE('6589B');
call PRC_DELETE_AIRPLANE('6589B');
call PRC_UPDATE_AIRPLANE('5094A',2020,'Iberia','Airbus A330',01,160);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
